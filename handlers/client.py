import time

from aiogram import types, Dispatcher
from create_bot import bot
from keyboards import client_kb
from FSM.RegisterFSM import *
from FSM.NotificFSM import *
# from main import cursor

ALL_USERS_BD = [814991257]
admin_idBD = 814991257
ALL_Notif = [11]
"""//////////////////////////////////////////////////////////////////////////////////////////////////////////////////"""

NOTIFICATIONS = {
    'text': ['photo', 'date', 'time']
}


def get_ids_of_users():
    # cursor.execute("SELECT user_id_tg FROM users;")
    # return [i[0] for i in cursor.fetchall()]
    pass


async def command_start(message: types.Message):
    try:
        if message.from_user.id == admin_idBD:
            await bot.send_message(message.from_user.id, 'ü§ñ')
            await bot.send_message(message.from_user.id, '–ê–¥–º–∏–Ω, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å!', reply_markup=client_kb.AdminMenu)
        else:
            await bot.send_message(message.from_user.id, 'üë®‚Äçüè´')
            await bot.send_message(message.from_user.id, '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —ç—Ç–æ –æ–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞ "....". '
                                                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,'
                                                         ' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!)')
    except Exception:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—ã - –∑–∞–ø—Ä–µ—â–µ–Ω–æ!')

"""//////////////////////////////////////////////////////////////////////////////////////////////////////////////////"""


async def OneTen(message: types.Message):
    if 1 >= int(message.text):
        await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! \n–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–µ!')
    elif 1 < int(message.text) <= 10:
        print("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    elif int(message.text) > 10:
        temp = 10
        print("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    else:
        temp = 0
        print("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! \n–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–µ!")


async def text(message: types.Message):
    if message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        await bot.send_message(message.from_user.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
        # –∑–∞–ø—Ä–æ—Å

    elif message.text == '–û–ø—Ä–æ—Å':
        await bot.send_message(message.from_user.id, '–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!)', reply_markup=client_kb.one_ten)

    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' and message.from_user.id == admin_idBD:
        await bot.send_message(message.from_user.id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')

    elif message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' and message.from_user.id == admin_idBD:
        await bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞')
    else:
        temp = message.text
        temp = temp.replace(' ', '')
        temp = temp.replace('+7', '8')
        if len(temp) == 11 and temp[0] == '8':
            await bot.send_message(message.from_user.id, '–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!)', reply_markup=client_kb.AccountMenu)
        elif temp[0] == '8':
            await bot.send_message(message.from_user.id, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        else:
            if 1 >= int(message.text):
                await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! \n–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–µ!', reply_markup=client_kb.AccountMenu)
            elif 1 < int(message.text) <= 10:
                await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=client_kb.AccountMenu)
            elif int(message.text) > 10:
                temp = 10
                await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=client_kb.AccountMenu)
            elif 1 > int(message.text):
                temp = 0
                await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! \n–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–µ!",
                                       reply_markup=client_kb.AccountMenu)
            else:
                await bot.send_message(message.from_user.id, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


async def task():
    while True:
        await asyncio.sleep(58)
        for j in ALL_Notif:
            if time.time() == time.time():  # == j
                temp = get_ids_of_users()
                for i in temp:
                    await bot.send_message(i, '')


"""//////////////////////////////////////////////////////////////////////////////////////////////////////////////////"""


def register_handlers_client(dp: Dispatcher):  # –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.register_message_handler(command_start, commands=['start'])

    #  dp.register_message_handler(OneTen, text='–û–ø—Ä–æ—Å')

    dp.register_message_handler(cm_start, text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', state=None)
    dp.register_message_handler(cm_start2, state=FSMAdmin.name)
    dp.register_message_handler(cm_start3, state=FSMAdmin.mail)
    dp.register_message_handler(cm_start4, state=FSMAdmin.how)

    dp.register_message_handler(cms_start, text='–†–∞—Å—Å—ã–ª–∫–∞', state=None)
    dp.register_message_handler(cms_start2, state=FSMsAdmin.photo)
    dp.register_message_handler(cms_start2, state=FSMsAdmin.text)
    dp.register_message_handler(cms_start3, state=FSMsAdmin.date)
    dp.register_message_handler(cms_start4, state=FSMsAdmin.time)

    dp.register_message_handler(text)
